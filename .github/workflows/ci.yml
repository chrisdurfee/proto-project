name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: PHP ${{ matrix.php }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        php: ['8.3']

    services:
      mariadb:
        image: mariadb:11.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: proto
          MYSQL_USER: proto_app_user
          MYSQL_PASSWORD: ProtoApp2025!SecureDbPass#789
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_mysql, bcmath, intl, gd, exif, iconv
          coverage: xdebug

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy environment configuration
        run: cp common/Config/.env-example common/Config/.env

      - name: Wait for MariaDB
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"root" --silent; then
              echo "MariaDB is ready"
              break
            fi
            echo "Waiting for MariaDB... ($i/30)"
            sleep 2
          done

      - name: Create database tables
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot proto << 'EOF'
          CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255),
            email VARCHAR(255) UNIQUE,
            password VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          CREATE TABLE IF NOT EXISTS user_roles (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT,
            role VARCHAR(50),
            FOREIGN KEY (user_id) REFERENCES users(id)
          );
          EOF
        continue-on-error: true

      - name: Run tests
        run: vendor/bin/phpunit --testdox
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: proto
          DB_USERNAME: proto_app_user
          DB_PASSWORD: ProtoApp2025!SecureDbPass#789
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Generate coverage report
        if: matrix.php == '8.3'
        run: vendor/bin/phpunit --coverage-clover coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.php == '8.3'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: dom, curl, libxml, mbstring, zip
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=2G
        continue-on-error: true

      - name: Check PHP syntax
        run: |
          ERRORS=0
          for file in $(find . -type f -name "*.php" ! -path "./vendor/*"); do
            php -l "$file" > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "Syntax error in: $file"
              php -l "$file"
              ERRORS=1
            fi
          done
          if [ $ERRORS -eq 1 ]; then
            exit 1
          fi
          echo "No syntax errors found"

  frontend:
    name: Frontend - ${{ matrix.app }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        app: [main, crm, developer]
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSL stub files
        run: |
          mkdir -p infrastructure/docker/ssl
          # Create stub SSL files for build process
          touch infrastructure/docker/ssl/localhost.key
          touch infrastructure/docker/ssl/localhost.crt

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: apps/${{ matrix.app }}
        run: npm install

      - name: Type check
        working-directory: apps/${{ matrix.app }}
        run: npm run type-check
        continue-on-error: true

      - name: Build
        working-directory: apps/${{ matrix.app }}
        env:
          NODE_ENV: production
        run: npm run build

      - name: Upload build artifacts
        if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/dist
          retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile
          push: false
          load: true
          tags: proto-project:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm proto-project:test php -v
          docker run --rm proto-project:test composer --version

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Check for security vulnerabilities
        run: composer audit
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Audit frontend dependencies - Main
        working-directory: apps/main
        run: |
          npm install
          npm audit --audit-level=high
        continue-on-error: true

      - name: Audit frontend dependencies - CRM
        working-directory: apps/crm
        run: |
          npm install
          npm audit --audit-level=high
        continue-on-error: true

      - name: Audit frontend dependencies - Developer
        working-directory: apps/developer
        run: |
          npm install
          npm audit --audit-level=high
        continue-on-error: true
